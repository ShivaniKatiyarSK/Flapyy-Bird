import random  #for generating random number
import sys
import pygame 
from pygame.locals import *

# global variables for the game
FPS = 32
SCREENWIDTH = 289
SCREENHEIGHT = 511
SCREEN = pygame.display.set_mode((SCREENWIDTH, SCREENHEIGHT))
GROUNDY = SCREENHEIGHT * 0.8
GAME_SPRITES = {}
GAME_SOUNDS = {}
PLAYER = 'gallery/sprites/bird.png.png'
BACKGROUND = 'gallery/sprites/background.png.png'
PIPE = 'gallery/sprites/pipe.png.png'
def welcomeScreen():
    """
    shows welcome screen 
    """

    playerx = int(SCREENWIDTH/5)
    playery = int((SCREENHEIGHT - GAME_SPRITES['player'].get_height())/2)
    messagex = int((SCREENWIDTH - GAME_SPRITES['message'].get_width())/2)
    messagey = int(SCREENHEIGHT*0.13)
    basex = 0
    while True:
        for event in pygame.event.get():
            if event.type== QUIT or (event.type==KEYDOWN and event.key == K_ESCAPE):
                pygame.quit()
                sys.exit()

            elif event.type==KEYDOWN and (event.key == K_SPACE or event.key == K_UP):
                return 
            else:
                SCREEN.blit(GAME_SPRITES['background'], (0,0))
                SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))
                SCREEN.blit(GAME_SPRITES['message'], (messagex, messagey))
                SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))
                pygame.display.update()
                FPSCLOCK.tick(FPS)

def gameoverScreen(score):
    """       

    displays the game over screen and shows the players final score
    """

    gameOverMessage = pygame.image.load('gallery/sprites/gameover.png.jpg').convert_alpha()
    messageX = int((SCREENWIDTH - gameOverMessage.get_width())/2)
    messageY = int(SCREENHEIGHT * 0.2)

    SCREEN.blit(GAME_SPRITES['background'], (0, 0))
    SCREEN.blit(GAME_SPRITES['base'], (0, GROUNDY))
    SCREEN.blit(gameOverMessage, (messageX, messageY))

    myDigits = [int(x) for x in list(str(score))]
    width = 0
    for digit in myDigits:
        width += GAME_SPRITES['numbers'][digit].get_width()
    Xoffset = (SCREENWIDTH - width) / 2

    for digit in myDigits:
        SCREEN.blit(GAME_SPRITES['numbers'][digit], (Xoffset, SCREENHEIGHT * 0.6))
        Xoffset += GAME_SPRITES['numbers'][digit].get_width()

    pygame.display.update()
    pygame.time.wait(2000)


def mainGame():
    score = 0
    playerx = int(SCREENWIDTH/5)
    playery = int(SCREENWIDTH/2)
    basex = 0

    #create 2 pipes for bitting on the screen 
    newPipe1 = getRandomPipe()
    newPipe2 = getRandomPipe()

    #my list of upper pipes
    upperPipes = [
        {'x': SCREENWIDTH+200, 'y':newPipe1[0]['y']},
        {'x': SCREENWIDTH+200+(SCREENWIDTH/2), 'y':newPipe2[0]['y']},
    ]
    #my list of lower pipes
    lowerPipes = [
        {'x': SCREENWIDTH+200, 'y':newPipe1[1]['y']},
        {'x': SCREENWIDTH+200+(SCREENWIDTH/2), 'y':newPipe2[1]['y']},
    ]

    pipeVelX = -4  # game speed

    playerVelY = -9
    playerMaxVelY = 10   #velocity
    playerMinVelY = -8 
    playerAccY = 1   # acc of falling

    playerFlapAccv = -8
    playerFlapped = False

    while True:
        for event in pygame.event.get():
            if event.type == QUIT or (event.type == KEYDOWN and event.key == K_ESCAPE):
                pygame.quit()
                sys.exit()
            if event.type == KEYDOWN and (event.key == K_SPACE or event.key == K_UP):
                if playery > 0:
                    playerVelY = playerFlapAccv
                    playerFlapped = True
                    GAME_SOUNDS['wing'].play()

        crashTest = iscollide(playerx, playery, upperPipes, lowerPipes)
        if crashTest:
            gameoverScreen(score)  
            return
        
        playerMidPos = playerx + GAME_SPRITES['player'].get_width()/2
        for pipe in upperPipes:
            pipeMidPos = pipe['x'] + GAME_SPRITES['pipe'][0].get_width()/2
            if pipeMidPos<+ playerMidPos < pipeMidPos + 4:
                score += 1
                print(f"Youe score is {score}")
                GAME_SOUNDS['point'].play()

        # increasing speed
        if score % 10 ==0:
            pipeVelx = -2 - (score // 10)
            playerAccY = 1 + (score // 10)

        if playerVelY < playerMaxVelY and not playerFlapped:
            playerVelY += playerAccY

        if playerFlapped:
            playerFlapped = False
        playerHeight = GAME_SPRITES['player'].get_height()
        playery = playery + min(playerVelY, GROUNDY - playery - playerHeight)

        # move pipes to the left 
        for upperPipe , lowerpipe in zip(upperPipes, lowerPipes):
            upperPipe['x'] += pipeVelX
            lowerpipe['x'] += pipeVelX

        #add a new pipe when he first is about to cross the leftmost part of the screen
        if 0<upperPipes[0]['x']<5:
            newpipe = getRandomPipe()
            upperPipes.append(newpipe[0])
            lowerPipes.append(newpipe[1])

        #if the pipe is out of the screen, remove it
        if upperPipes[0]['x'] < -GAME_SPRITES['pipe'][0].get_width():
            upperPipes.pop(0)
            lowerPipes.pop(0)

        #lets blit our sprites 
        SCREEN.blit(GAME_SPRITES['background'], (0, 0))
        for upperPipe, lowerPipe in zip(upperPipes, lowerPipes):
            SCREEN.blit(GAME_SPRITES['pipe'][0],(upperPipe['x'], upperPipe['y']))
            SCREEN.blit(GAME_SPRITES['pipe'][1],(lowerPipe['x'], lowerPipe['y']))

        SCREEN.blit(GAME_SPRITES['base'],(basex,GROUNDY)) 
        SCREEN.blit(GAME_SPRITES['player'],(playerx, playery))

        myDigits = [int(x) for x in list(str(score))]
        width = 0
        for digit in myDigits:
            width += GAME_SPRITES['numbers'][digit].get_width()
        Xoffset = (SCREENWIDTH - width)/2

        for digit in myDigits:
            SCREEN.blit(GAME_SPRITES['numbers'][digit], (Xoffset, SCREENHEIGHT*0.12))
            Xoffset += GAME_SPRITES['numbers'][digit].get_width()

        pygame.display.update()
        FPSCLOCK.tick(FPS)

def iscollide(playerx, playery, upperPipes, lowerPipes):
    if playery > GROUNDY - 25 or playery < 0:
        GAME_SOUNDS['hit'].play()
        return True
    
    playerHitboxMargin = 5
    pipeHitboxMargin = 5
    
    for pipe in upperPipes:
        PipeHeight = GAME_SPRITES['pipe'][0].get_height()
        if(playery < PipeHeight + pipe['y'] - pipeHitboxMargin and abs(playery - pipe['x']) < GAME_SPRITES['pipe'][0].get_width() - pipeHitboxMargin):
            GAME_SOUNDS['hit'].play()
            return True
        
    for pipe in lowerPipes:
        if (playery + GAME_SPRITES['player'].get_height() - playerHitboxMargin > pipe['y'] + pipeHitboxMargin and abs(playerx - pipe['x']) < GAME_SPRITES['pipe'][0].get_width() - pipeHitboxMargin):
            GAME_SOUNDS['hit'].play() 
            return True
        
    return False

def getRandomPipe():
    """
    generating positions of 2 pipes , one bottom straight and one top rotated for bitting on the screen
    """
    pipeHeight = GAME_SPRITES['pipe'][0].get_height()
    offset = SCREENHEIGHT/3
    y2 = offset + random.randrange(0, int(SCREENHEIGHT - GAME_SPRITES['base'].get_height() - 1.5 *offset))
    pipeX = SCREENWIDTH + 10
    y1 = pipeHeight - y2 + offset
    pipe = [
        {'x': pipeX, 'y': -y1},
        {'x': pipeX, 'y': y2}
    ]
    return pipe


if _name=="main_":
    #game will install
    pygame.init()
    FPSCLOCK = pygame.time.Clock() 
    pygame.display.set_caption('Flappy bird')
    GAME_SPRITES['numbers']=(
        pygame.image.load('gallery/sprites/0.png.jpg').convert_alpha(),
        pygame.image.load('gallery/sprites/1.png.jpg').convert_alpha(),
        pygame.image.load('gallery/sprites/2.png.jpg').convert_alpha(),
        pygame.image.load('gallery/sprites/3.png.jpg').convert_alpha(),
        pygame.image.load('gallery/sprites/4.png.jpg').convert_alpha(),
        pygame.image.load('gallery/sprites/5.png.jpg').convert_alpha(),
        pygame.image.load('gallery/sprites/6.png.jpg').convert_alpha(),
        pygame.image.load('gallery/sprites/7.png.jpg').convert_alpha(),
        pygame.image.load('gallery/sprites/8.png.jpg').convert_alpha(),
        pygame.image.load('gallery/sprites/9.png.jpg').convert_alpha(),
    )

    GAME_SPRITES['message'] = pygame.image.load('gallery/sprites/message.png.jpg').convert_alpha()
    GAME_SPRITES['gameover'] = pygame.image.load('gallery/sprites/gameover.png.jpg').convert_alpha()

    GAME_SPRITES['base'] = pygame.image.load('gallery/sprites/base.png.png').convert_alpha()
    GAME_SPRITES['pipe'] =(pygame.transform.rotate(pygame.image.load(PIPE).convert_alpha(), 180),
    pygame.image.load(PIPE).convert_alpha()
    )

    #Game sounds
    GAME_SOUNDS['die'] = pygame.mixer.Sound('gallery/audio/die.wav.wav')
    GAME_SOUNDS['hit'] = pygame.mixer.Sound('gallery/audio/hit.wav.mp3')
    GAME_SOUNDS['point'] = pygame.mixer.Sound('gallery/audio/point.wav.wav')
    GAME_SOUNDS['swoosh'] = pygame.mixer.Sound('gallery/audio/swoosh.wav.wav')
    GAME_SOUNDS['wing'] = pygame.mixer.Sound('gallery/audio/wing.wav.wav')

    GAME_SPRITES['background'] = pygame.image.load(BACKGROUND).convert()
    GAME_SPRITES['player'] = pygame.image.load(PLAYER).convert_alpha()

    while True:
       welcomeScreen() #shows welcome screen
       mainGame() #main game screen
